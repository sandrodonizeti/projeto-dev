//n√£o reconhece o user mas registra post
router.get('/pratica', async function (req, res, next) {
  // mensagens devem ser recuperadas com o user_id correspondente
  const user_id = req.session.user.id; // Obt√©m o ID do usu√°rio da sess√£o
  const sql = 'SELECT * FROM message WHERE user_id '; // Adiciona a condi√ß√£o user_id = ?
  const [rows] = await pool.query(sql, [user_id]);
  console.log(rows);
  res.render('users/pratica', { mensagens: rows, user_id: user_id });
});
pratica  <%= user.name %>


//mostra so o nome na renderiza√ß√£o
SELECT message.content, user.username FROM message LEFT JOIN user ON user.username = message.content

//mostra todos os nomes com a mesma mensagem de umapostagem na renderiza√ß√£o iguau est√° no id do banco
SELECT message.content, user.username FROM message INNER JOIN user ON message.user_id = user_id

//mostra todos as mensagens postadas com o ultimo username cadastrado na renderiza√ß√£o
SELECT message.content, user.username FROM message LEFT JOIN user ON message.user_id = user_id

//mostra so as mensagens
SELECT * FROM message WHERE user_id = user_id

//mostra todos as mensagens postadas do 1¬∫ ao ultimo username cadastrado na renderiza√ß√£o
SELECT message.content, user.username FROM message message JOIN user user ON message.user_id = user.id

//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
//exibe as mensagens em bloco com a ultima postagem na linha inferior, os username conforme user.id
   <% let currentUsername=null; %>

   <% for (const mensagem of mensagens ) { %>
       <% if (mensagem.username !==currentUsername) { %>
           <!-- Exibir o nome do usu√°rio -->
           <h3>
               <%= mensagem.username %>
           </h3>
           <% currentUsername=mensagem.username; %>
               <% } %>

                   <!-- Exibir a mensagem -->
                   <div>
                       <%= mensagem.content %>
                   </div>
                   <% } %>
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
//exibe as mensagens em bloco com a ultima postagem nalinha superior, os username conforme user.id
            <% let currentUsername = null; %>
        
            <!-- ordem das mensagens para que a √∫ltima seja a primeira -->
            <% for (let i = mensagens.length - 1; i >= 0; i--) { %>
                <% const mensagem = mensagens[i]; %>
                <% if (mensagem.username !== currentUsername) { %>
                    <!-- Exibir o nome do usu√°rio -->
                    <h3><%= mensagem.username %></h3>
                    <% currentUsername = mensagem.username; %>
                <% } %>
        
                <!-- Exibir a mensagem -->
                <div>
                    <%= mensagem.content %>
                </div>
            <% } %>
        
        </div>
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
//ordem das mensagens para que a primeira seja a √∫ltima

<% let currentUsername=null; %>

                        <!-- ordem das mensagens para que a primeira seja a √∫ltima -->
                        <% for (const mensagem of mensagens) { %>
                            <!-- Exibir o nome do usu√°rio -->
                            <% if (mensagem.username !==currentUsername) { %>
                                <h3>
                                    <%= mensagem.username %>
                                </h3>
                                <% currentUsername=mensagem.username; %>
                                    <% } %>

                                        <!-- Exibir a mensagem -->
                                        <div>
                                            <%= mensagem.content %>
                                        </div>
                                        <% } %>

                </div>
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// Inverta a ordem das mensagens para que o username mais recente seja exibido por √∫ltimo 
<% const reversedMensagens = mensagens.reverse(); %>
<% let currentUsername = null; %>

<% for (const mensagem of reversedMensagens) { %>
<% if (mensagem.username !== currentUsername) { %>
    <!-- Exibir o nome do usu√°rio -->
    <h3><%= mensagem.username %></h3>
    <% currentUsername = mensagem.username; %>
<% } %>

<!-- Exibir a mensagem -->
<div>
    <%= mensagem.content %>
</div>
<% } %>

</div>
//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
<% for (const mensagem of mensagens ) { %>
    <%= user.name  %>                                                                         <%= mensagem.content  %>
    <% } %>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
<% if (user.name==='logado' ) { %>
    ‚úî‚úî<% } else { %>‚úî<% } %>
                <% { %>

                    <% } %>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    
    <%- include('../partials/topbar'); %>

    <%- include('pratica1'); %>

    <img id="image-preview" alt="Preview da Imagem" style="display: none;">

<script>
    function atualizarConteudo() {
        fetch('/pratica') /* chats/4 */
            .then(response => response.text())
            .then(data => {
                document.getElementById('textiaria').innerHTML = data;
            })
            .catch(error => {
                console.error('Erro ao buscar novo conte√∫do:', error);
            });
    }
    setInterval(atualizarConteudo, 3000);
</script>

    
  <script>
    function salvarPosicaoScroll() {
        localStorage.setItem("scrollPosicao", window.scrollY);
    }
    function restaurarPosicaoScroll() {
        var scrollPosicao = localStorage.getItem("scrollPosicao");
        if (scrollPosicao !== null) {
            window.scrollTo(0, parseInt(scrollPosicao));
        }
    }
    window.addEventListener("beforeunload", salvarPosicaoScroll);
</script>

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
<div class="" id="textiaria">
    <% let currentUsername=null; %>
        <% for (const mensagem of mensagens) { %>
            <% if (mensagem.username !==currentUsername) { %>
                <h3><br>
                    &nbsp; <% if (user) { %>
                        <% if (user.sex==='Feminino' ) { %>
                            ‚úî <%= user.name %>
                                <% } else { %>
                                    ‚úî‚úî <%= user.name %>
                                        <% } %>
                                            <% } else { %>
                                                ‚úî
                                                <% } %><%=  %>
                </h3>
                <% currentUsername=mensagem.username; %>
                    <% } %>
                            <h5>&nbsp;&nbsp;&nbsp;‚úî&nbsp;<%= mensagem.content %></h5>
                        <% } %>                                               
</div>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
<ul>
    <li><a href="/usuarios">Lista de Usu√°rios</a></li>
    <li><a href="/usuarios/atualizar/<%= user.id %>">Atualizar</a></li>
    <li><a href="/usuarios/deletar/<%= user.id %>">Deletar</a></li>
    <li><a href="/usuarios/exibir/<%= user.id %>">Exibir</a></li>
</ul>

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

<script>
    function validateMessage() {
        const mensagemInput = document.getElementById("mensagem");
        const mensagemValue = mensagemInput.value.trim(); // Remove espa√ßos em branco no in√≠cio e no fim
        const verDiv = document.getElementById("ver"); // Div para exibir o √≠cone de erro

        if (mensagemValue.length === 0) {
            // Se o campo de mensagem estiver vazio, mostre um √≠cone de erro alinhado √† metade do bot√£o
            verDiv.innerHTML = '<button id="bt" style="background: rgba(255, 255, 255, 0.089); border-radius: 10px; position: relative;">' +
                '<h1 style="color: #a7c298; background: rgba(255, 255, 255, 0.089);">' +
                '<span style="position: absolute; top: 50%; transform: translate(-50%, -50%); color: red; font-size: 12px;">üî¥</span>' +
                'Chat</h1>' +
                '</button>';
            return false; // Impede o envio do formul√°rio
        } else if (mensagemValue.length > 0) {
                                     // Se o campo de mensagem tiver pelo menos 1 caractere, mostre um √≠cone verde e retorne true
            verDiv.innerHTML = '<span style="color: lime; font-size: 24px;">üü¢</span>';

            return true;
        } else {
            // Se o campo de mensagem tiver pelo menos 1 caractere, permita o envio do formul√°rio
            verDiv.innerHTML = ''; // Limpa a div "ver" se houver um √≠cone de erro anterior
            return true;
        } 
    }
</script>

<form onsubmit="return validateMessage()">
    
</form>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
<img src="workplace.jpg" alt="Workplace" usemap="#workmap" width="400" height="379">

<map name="workmap">
  <area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
  <area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
  <area shape="circle" coords="337,300,44" alt="Cup of coffee" href="coffee.htm">
</map>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

if (isLoggedIn) {
    console.log("Usu√°rio est√° logado. Renderizar conte√∫do OK.");
  } else {
    console.log("Usu√°rio n√£o est√° logado. Renderizar outra coisa.");
  }

  <input class="c" id="mensagem" name="mensagem" autocomplete="off" value=""
                        placeholder="Digite uma mensagem...">     
                        html, body {
                            height: 100%;
                            margin: 0;
                            padding: 0;
                        }
                        
                        body {
                            background: #9f9bf1;
                            font-family: Arial, sans-serif;
                            color: #f8f2f2;
                            margin: 0;
                            padding: 0;
                            overflow-x: hidden; /* Evita a barra de rolagem horizontal */
                        }
                        
                        /* Definir o container principal para ocupar toda a tela */
                        .continer {
                            position: relative; /* Alterado para relativo */
                            height: 100vh; /* Alterado para 100% da altura da viewport */
                            width: 100%; /* Alterado para 100% da largura da viewport */
                            border: 2px solid transparent;
                            border-radius: 5px;
                            color: #0e0d0d;
                            background-color: #7073f8;
                            box-sizing: border-box; /* Adicionado para incluir borda no c√°lculo da largura/altura */
                        }
 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 
 <form>
    <label for="file-input">
        ‚úâ
        <input type="file" id="file-input" name="file" style="display: none;">
    </label>
    <button id="submit-button" type="button" onclick="uploadFile()">Enviar</button>

    <script>
        function uploadFile() {
            // L√≥gica para enviar o arquivo, se necess√°rio
            // Pode ser adicionada usando JavaScript
            alert('Arquivo enviado!');
        }
    </script>
</form>

preview  <div id="image-preview"></div>
<script>
    document.getElementById('file-input').addEventListener('change', function() {
        var file = this.files[0];
        if (file) {
            var reader = new FileReader();
            reader.onload = function(event) {
                var imgElement = document.createElement('img');
                imgElement.src = event.target.result;
                imgElement.style.maxWidth = '100%';
                imgElement.style.height = 'auto';
                document.getElementById('image-preview').appendChild(imgElement);
            };
            reader.readAsDataURL(file);
        }
    });
</script>

<script>
    document.getElementById('upload-form').addEventListener('submit', function (event) {
        event.preventDefault();
        var formData = new FormData(this);
        fetch('/uploads', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erro ao fazer upload: ' + response.status);
            }
            return response.json();
        })
        .then(data => {
            // Manipule a resposta JSON conforme necess√°rio
            console.log('Upload bem-sucedido:', data);
        })
        .catch(error => {
            console.error(error);
            // Trate o erro de upload aqui
        });
    });
</script>

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
pratica

<% if (mensagem.path) { %>
    <% if (mensagem.path.toLowerCase().endsWith('.jpg') || mensagem.path.toLowerCase().endsWith('.jpeg') || mensagem.path.toLowerCase().endsWith('.png') || mensagem.path.toLowerCase().endsWith('.gif')) { %>
        <div class="photo-container">
            <img src="<%= mensagem.path %>" alt="Foto enviada pelo usu√°rio" class="uploaded-photo">
        </div>
    <% } else { %>
        <div class="file-container">
            <a href="<%= mensagem.path %>" target="_blank"><%= mensagem.path %></a>
        </div>
    <% } %>
<% } %>

<% for (const mensagem of mensagens) { %>
    <% if (mensagem.photo) { %>
        <div class="photo-container">
            <img src="<%= mensagem.photo %>" alt="Foto enviada pelo usu√°rio" class="uploaded-photo">
        </div>
    <% } %>
<% } %>


<li><a href="/usuarios">Lista de Usu√°rios</a></li>

